{{define "waiting_area_survey"}}
<!DOCTYPE html>
<html>

<head>

    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:site" content="@qoltyscience">
    <meta name="twitter:creator" content="@qoltyscience">
    <meta name="twitter:title" content="Understand your patients whenever, wherever, however.">
    <meta name="twitter:description" content="Digital Health Research Tools">

    <title>EASI-PRO</title>
    <meta name="description" content="Understand your patients whenever, wherever, however.">
    <meta name="keywords" content="qolty, science, digital research tools, research, tool, clinical, health, healthcare, technology, app, mobile apps, customizable">

    <meta property="og:title" content="Qolty">
    <meta property="og:site_name" content="Qolty">
    <meta property="og:type" content="website">
    <meta property="og:description" content="Understand your patients whenever, wherever, however.">
    <meta property="og:image" content="https://qolty-mazeengillc.netdna-ssl.com/wp-content/uploads/2017/04/cover-push-notifications.png?x47743">

    <link rel="icon" type="image/png" sizes="32x32" href="https://qolty-mazeengillc.netdna-ssl.com/wp-content/uploads/2017/04/logo-and-cover-03-1.png?x47743">

    <link href="https://s3-us-west-2.amazonaws.com/qolty/demo/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://s3-us-west-2.amazonaws.com/qolty/demo/css/animate.css" rel="stylesheet">
    <link href="https://s3-us-west-2.amazonaws.com/qolty/demo/css/style.css" rel="stylesheet">
    <link href="https://s3-us-west-2.amazonaws.com/qolty/demo/css/easipro.css" rel="stylesheet">
    <link href="https://s3-us-west-2.amazonaws.com/qolty/demo/css/plugins/sweetalert/sweetalert.css" rel="stylesheet">

    <script src="https://use.fontawesome.com/6f9302e855.js"></script>

    <style>
        #promisContainer li {
            margin:0 5px 0 0;
            width:100px;
            height:40px;
        }

        #promisContainer label, #promisContainer input {
            display:block;
        }

        #promisContainer input {
            opacity:0.011;
            z-index:100;
            position: absolute;
            height: 30px;
            width:100%;
        }

        #promisContainer input:hover {
            cursor:default;
        }

        #promisContainer input:checked + label {
            background:#3ac0f0;
        }

        #promisContainer label {
            padding:10px;
            border:1px solid #CCC; 
            cursor:pointer;
            z-index:90;
            margin-bottom:10px;
        }
      </style>

</head>

<body>

    <div id="wrapper">
    {{template "sidenav" .}}

    <div id="page-wrapper" class="gray-bg">

    {{template "topnav" .}}

    <div class="wrapper wrapper-content" style="padding-bottom:40px">
        <div class="row">
            <div class="col-lg-7">

                <div class="ibox float-e-margins">
                    <div class="ibox-title">
                        <h5>Patient Survey</h5>
                        <div class="ibox-tools">
                            <a class="collapse-link">
                                <i class="fa fa-chevron-up"></i>
                            </a>
                        </div>
                    </div>
                    <div class="ibox-content" id="patients">

                        <div id="dobForm">Verify Date of Birth: *demo: <span id="demoDOB"></span><br><br><input placeholder="ie. 1993-05-18" id="patientDOB"><br><br><button class="btn btn-primary" style="float:left" id="dobButton">Submit</button></div>
                        <div id="mainContainer" style="float:left; margin-left:50px; margin-bottom:20px">
                            <div class="wrapper wrapper-content animated" style="padding-left:25px; padding-right:25px; max-width:500px">
                                <div class="row">
                                    <div style="display:none;" id="promisContainer">loading...</div>
                                </div>
                            </div>
                        </div>
                        <br><br style="clear:both">
                    </div>
                </div>
            </div>

            <div class="col-lg-5">

                <div class="ibox float-e-margins">
                    <div class="ibox-title">
                        <h5>Commentary</h5>
                        <div class="ibox-tools">
                            <a class="collapse-link">
                                <i class="fa fa-chevron-up"></i>
                            </a>
                        </div>
                    </div>
                    <div class="ibox-content">

                        Step 1: Patient must verify DOB to access survey<br><br>
                        Step 2: Patient data is pulled from FHIR server<br><br>
                        <!-- HTML generated using hilite.me --><div style="background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%">$.ajax({
    url<span style="color: #333333">:</span> <span style="background-color: #fff0f0">&quot;http://easi-pro.org:3001/Patient/&quot;</span> <span style="color: #333333">+</span> patientID, 
    type<span style="color: #333333">:</span> <span style="background-color: #fff0f0">&quot;GET&quot;</span>,
    success<span style="color: #333333">:</span> <span style="color: #008800; font-weight: bold">function</span>(data){
      patientDOB <span style="color: #333333">=</span> data.birthDate;
    }
});
</pre></div>
<br>
                    Step 3: Adaptive test is loaded via <a href="https://www.assessmentcenter.net/ac_api" target="_blank">Assessment Center API</a><br><br>
                    <!-- HTML generated using hilite.me --><div style="background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%"><span style="color: #008800; font-weight: bold">function</span> startAssessment(promisUID){
  $.ajax({
    url<span style="color: #333333">:</span> <span style="background-color: #fff0f0">&quot;https://www.assessmentcenter.net/ac_api/2014-01/Assessments/&quot;</span> <span style="color: #333333">+</span> promisUID <span style="color: #333333">+</span> <span style="background-color: #fff0f0">&quot;.json&quot;</span>,
    cache<span style="color: #333333">:</span> <span style="color: #008800; font-weight: bold">false</span>,
    type<span style="color: #333333">:</span> <span style="background-color: #fff0f0">&quot;POST&quot;</span>,
    data<span style="color: #333333">:</span> <span style="background-color: #fff0f0">&quot;UID=&quot;</span> <span style="color: #333333">+</span> promisUID,
    dataType<span style="color: #333333">:</span> <span style="background-color: #fff0f0">&quot;json&quot;</span>,
    
    beforeSend<span style="color: #333333">:</span> <span style="color: #008800; font-weight: bold">function</span>(xhr) {
    
      <span style="color: #008800; font-weight: bold">var</span> Reg <span style="color: #333333">=</span> <span style="background-color: #fff0f0">&quot;XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX&quot;</span>;
      <span style="color: #008800; font-weight: bold">var</span> Token <span style="color: #333333">=</span> <span style="background-color: #fff0f0">&quot;XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX&quot;</span>;
    
      <span style="color: #008800; font-weight: bold">var</span> bytes <span style="color: #333333">=</span> Crypto.charenc.Binary.stringToBytes( Reg <span style="color: #333333">+</span> <span style="background-color: #fff0f0">&quot;:&quot;</span> <span style="color: #333333">+</span> Token );
      <span style="color: #008800; font-weight: bold">var</span> base64 <span style="color: #333333">=</span> Crypto.util.bytesToBase64(bytes);
      xhr.setRequestHeader(<span style="background-color: #fff0f0">&quot;Authorization&quot;</span>, <span style="background-color: #fff0f0">&quot;Basic &quot;</span> <span style="color: #333333">+</span> base64);
    },
    
    success<span style="color: #333333">:</span> <span style="color: #008800; font-weight: bold">function</span>(data) { 
      currentPromisOID <span style="color: #333333">=</span> data.OID;
      renderScreen(data.OID, <span style="background-color: #fff0f0">&quot;&quot;</span>, <span style="background-color: #fff0f0">&quot;&quot;</span>);
    },
    
    error<span style="color: #333333">:</span> <span style="color: #008800; font-weight: bold">function</span>(jqXHR, textStatus, errorThrown){
      console.log(errorThrown);
    }
  })
}
</pre></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    {{template "footer" .}}

    <!-- Mainly scripts -->
    <script src="https://s3-us-west-2.amazonaws.com/qolty/demo/js/jquery-3.1.1.min.js"></script>
    <script src="https://s3-us-west-2.amazonaws.com/qolty/demo/js/bootstrap.min.js"></script>
    <script src="https://s3-us-west-2.amazonaws.com/qolty/demo/js/plugins/metisMenu/jquery.metisMenu.js"></script>
    <script src="https://s3-us-west-2.amazonaws.com/qolty/demo/js/plugins/slimscroll/jquery.slimscroll.min.js"></script>
    <script src="https://s3-us-west-2.amazonaws.com/hexcare/cdn/dev/global/js/plugins/crypto/crypto.js"></script>
    <script src="https://s3-us-west-2.amazonaws.com/qolty/demo/js/plugins/sweetalert/sweetalert.min.js"></script>

    <!-- Custom and plugin javascript -->
    <script src="https://s3-us-west-2.amazonaws.com/qolty/demo/js/inspinia.js"></script>

    <script>
        function getParameterByName(name, url) {
            if (!url) url = window.location.href;
            name = name.replace(/[\[\]]/g, "\\$&");
            var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
                results = regex.exec(url);
            if (!results) return null;
            if (!results[2]) return '';
            return decodeURIComponent(results[2].replace(/\+/g, " "));
        }

        var patientID = getParameterByName('patient_id');
        var patientDOB = "";

        $(document).on("click", "#dobButton", function(){
          if ($("#patientDOB").val() == patientDOB) {
            $("#dobForm").css("display", "none");
            startSurvey();
          }
        });

        $(document).on("click", "#doneButton", function(){
            swal({
                title: "Instructions",
                text: "Thank you! Please hand the iPad back to front desk staff or return to docking station on the tables."
            }, function () {
                window.location.href = "/waitingArea";
            });
        });

        $(document).ready(function(){
            $.ajax({
                url: "http://easi-pro.org:3001/Patient/" + patientID, 
                type: "GET",
                success: function(data){
                  console.log(data);
                  patientDOB = data.birthDate;
                  $("#demoDOB").html(patientDOB);
                }
            });
        });

        function displayScore(promisOID){
          $.ajax({
            url: "https://www.assessmentcenter.net/ac_api/2014-01/Results/" + promisOID + ".json",
            cache: false,
            type: "POST",
            data: "",
            dataType: "json",
            
            beforeSend: function(xhr) {
              var Reg = "4F703216-6A3D-4C94-B9ED-42D23C9CA200";
              var Token = "77E350DD-E89F-424B-8661-6089219D6BD4";
            
              var bytes = Crypto.charenc.Binary.stringToBytes( Reg + ":" + Token );
              var base64 = Crypto.util.bytesToBase64(bytes);
              xhr.setRequestHeader("Authorization", "Basic " + base64);
            },
            
            success: function(data) { 
              var mainResult = new Object();

              // mainResult.id = 0;
              mainResult.theta = 0;
              mainResult.error = 0;
              // mainResult.description = "";
              
              for(var i= 0; i < data.Items.length; i++){
                var tmpObj = new Object();

                if (i == 0) {
                  // mainResult.id = data.Items[i].ID;
                  mainResult.theta = data.Items[i].Theta;
                  mainResult.error = data.Items[i].StdError;
                }

                // if (i == data.Items.length - 1) {
                //  for(var j = 0; j < data.Items[i].Elements.length; j++){
                //    if(typeof(data.Items[i].Elements[j].Map) == "undefined"){
                //      var _p = document.createElement("p");
                //      _p.innerHTML = data.Items[i].Elements[j].Description;
                //      mainResult.description += data.Items[i].Elements[j].Description + " ";
                //    } 
                //  } 
                // }
              }

              // use theta and error to score properly
              mainResult.tScore = mainResult.theta * 10.0 + 50;
              // mainResult.finalError = Math.abs(mainResult.tScore - (mainResult.error * 100));
              // T-Score = Theta *10.0 + 50.0 = -17.7 + 50 = 32.3    Error +/- 3.4

              var data = {
                "resourceType": "Observation",
                "id": "example",
                "text": {
                  "fhir_comments": [
                    "    the mandatory quality flags:    "
                  ],
                  "status": "generated",
                  "div": "<div><p><b>Generated Narrative with Details</b></p><p><b>id</b>: example</p><p><b>status</b>: final</p><p><b>category</b>: Vital Signs <span>(Details : {http://hl7.org/fhir/observation-category code 'vital-signs' = 'Vital Signs', given as 'Vital Signs'})</span></p><p><b>code</b>: Weight Measured <span>(Details : {LOINC code '3141-9' = 'Body weight Measured', given as 'Weight Measured'}; {SNOMED CT code '27113001' = '27113001', given as 'Body weight'}; {http://acme.org/devices/clinical-codes code 'body-weight' = '??', given as 'Body Weight'})</span></p><p><b>subject</b>: <a>Patient/example</a></p><p><b>encounter</b>: <a>Encounter/example</a></p><p><b>value</b>: 185 lbs<span> (Details: http://unitsofmeasure.org code [lb_av] = '??')</span></p></div>"
                },
                "status": "final",
                "category": {
                  "fhir_comments": [
                    "   category code is A code that classifies the general type of observation being made. This is used for searching, sorting and display purposes.  "
                  ],
                  "coding": [
                    {
                      "system": "http://hl7.org/fhir/observation-category",
                      "code": "vital-signs",
                      "display": "Vital Signs"
                    }
                  ]
                },
                "code": {
                  "fhir_comments": [
                    "   \n    Observations are often coded in multiple code systems.\n      - LOINC provides a very specific code (though not usefully more specific in this particular case)\n      - snomed provides a clinically relevant code that is usually less granular than LOINC\n      - the source system provides its own code, which may be less or more granular than LOINC\n     "
                  ],
                  "coding": [
                    {
                      "fhir_comments": [
                        "    LOINC - always recommended to have a LOINC code    "
                      ],
                      "system": "http://loinc.org",
                      "code": "62963-4",
                      "display": "PROMIS"
                    }
                  ]
                },
                "subject": {
                  "reference": "Patient/" + patientID
                },
                "encounter": {
                  "reference": "Encounter/example"
                },
                "valueQuantity": {
                  "fhir_comments": [
                    "    In FHIR, units may be represented twice. Once in the\n    agreed human representation, and once in a coded form.\n    Both is best, since it's not always possible to infer\n    one from the other in code.\n\n    When a computable unit is provided, UCUM (http://unitsofmeasure.org)\n    is always preferred, but it doesn't provide notional units (such as\n    \"tablet\"), etc. For these, something else is required (e.g. SNOMED CT)\n      "
                  ],
                  "value": mainResult.tScore,
                  "unit": "",
                  "system": "http://unitsofmeasure.org",
                  "code": "[lb_av]"
                }
              };

              $.ajax({
                url: 'http://easi-pro.org:3001/Observation',
                type: 'POST',
                data: JSON.stringify(data),
                contentType: 'application/json; charset=utf-8'
              });

              $("#patients").html(mainResult.tScore + "<br><br><button id='doneButton'>Done</button>");
            },
            error: function(jqXHR, textStatus, errorThrown){
              console.log(errorThrown);
            }
          })
        }

        // TODO: clean up the beforeSend functions. dont store reg tokens here.
        function renderScreen(promisOID, promisItemResponse, promisResponse){
          $.ajax({
            url: "https://www.assessmentcenter.net/ac_api/2014-01/Participants/" + promisOID + ".json",
            cache: false,
            type: "POST",
            data: "ItemResponseOID=" + promisItemResponse + "&Response=" + promisResponse,
            dataType: "json",
            
            beforeSend: function(xhr) {
              var Reg = "4F703216-6A3D-4C94-B9ED-42D23C9CA200";
              var Token = "77E350DD-E89F-424B-8661-6089219D6BD4";
            
              var bytes = Crypto.charenc.Binary.stringToBytes( Reg + ":" + Token );
              var base64 = Crypto.util.bytesToBase64(bytes);
              xhr.setRequestHeader("Authorization", "Basic " + base64);
            },
            
            success: function(data) { 

              if(data.DateFinished != ''){
                displayScore(promisOID);
                return
              }

              var screen = "";

              for (var j=0; j < data.Items[0].Elements.length; j++){
                if (typeof(data.Items[0].Elements[j].Map) == 'undefined'){
                  screen = screen + data.Items[0].Elements[j].Description + "<br><br>";
                } else {
                  for (var k=0; k < data.Items[0].Elements[j].Map.length; k++){
                    screen = screen + "<input type=\'radio\' id=\'" + data.Items[0].Elements[j].Map[k].Value + "\' name=\'pro" + j + "\' ir=\'" + data.Items[0].Elements[j].Map[k].ItemResponseOID + "\' value=\'" + data.Items[0].Elements[j].Map[k].Description +  "\' /><label>" + data.Items[0].Elements[j].Map[k].Description + "</label>"; 
                  }
                }
              }

              screen = screen + "<button class='nextButtonPromis'>Next</button>";

              document.getElementById("promisContainer").innerHTML = screen;

              $(document).one("click", ".nextButtonPromis", function(){
                var tmpIR = "", tmpID = "";

                for (var i = 0; i < $('#promisContainer').length; i++){
                  if (typeof($($('#promisContainer')[i]).find("input:checked")[0]) != "undefined"){
                          tmpIR = $($('#promisContainer')[i]).find("input:checked")[0].attributes.ir.value;
                          tmpID = $($('#promisContainer')[i]).find("input:checked")[0].id;
                      } else {
                        alert("Please select a value.");
                      }
                }

                renderScreen(currentPromisOID, tmpIR, tmpID);
              });

              $(".progress").remove();
            },
            
            error: function(jqXHR, textStatus, errorThrown){
              console.log(errorThrown);
            }
          })
        }

        function startAssessment(promisUID){
          $.ajax({
            url: "https://www.assessmentcenter.net/ac_api/2014-01/Assessments/" + promisUID + ".json",
            cache: false,
            type: "POST",
            data: "UID=" + promisUID,
            dataType: "json",
            
            beforeSend: function(xhr) {
            
              var Reg = "4F703216-6A3D-4C94-B9ED-42D23C9CA200";
              var Token = "77E350DD-E89F-424B-8661-6089219D6BD4";
            
              var bytes = Crypto.charenc.Binary.stringToBytes( Reg + ":" + Token );
              var base64 = Crypto.util.bytesToBase64(bytes);
              xhr.setRequestHeader("Authorization", "Basic " + base64);
            },
            
            success: function(data) { 
              currentPromisOID = data.OID;
              renderScreen(data.OID, "", "");
            },
            
            error: function(jqXHR, textStatus, errorThrown){
              console.log(errorThrown);
            }
          })
        }

        function startSurvey(){
          $("#surveyTitle").append("PROMIS Assessment");
          startAssessment("56296D2D-C919-40F1-AFC7-6F544FCA7772");
          $("#promisContainer").css("display", "block");
        }

        var idleSeconds = 30;

        $(function(){
          var idleTimer;
          function resetTimer(){
            clearTimeout(idleTimer);
            idleTimer = setTimeout(whenUserIdle,idleSeconds*1000);
          }
          $(document.body).bind('mousemove keydown click',resetTimer); //space separated events list that we want to monitor
          resetTimer(); // Start the timer when the page loads
        });

        function whenUserIdle(){
          window.location.href = "/waitingArea";
        }
    </script>

</body>
</html>
{{end}}